{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WriteTech DocReview Series","text":"<p>The WriteTech DocReview Series is a community-driven initiative organized by WriteTech Hub, aimed at improving the quality of technical documentation. This initiative empowers members to refine their technical writing skills, build a portfolio, and make a meaningful contribution to enhancing documentation across industries.</p>"},{"location":"#objective","title":"Objective","text":"<p>This series is designed to: - Enable community members to build a portfolio by reviewing technical documentation. - Provide vetted feedback from in-house technical writers. - Share approved reviews publicly, recognizing community contributions.</p>"},{"location":"#community-goals","title":"Community goals","text":"<ul> <li>Skill development: Enhance the technical writing and review skills of community members.</li> <li>Portfolio building: Provide opportunities to build and showcase portfolios.</li> <li>Collaboration: Foster collaboration and mutual learning.</li> <li>Recognition: Acknowledge and highlight valuable contributions.</li> <li>Quality improvement: Improve the quality of technical documentation through collective feedback.</li> <li>Engagement: Increase community participation and engagement.</li> <li>Resource development: Build a repository of high-quality, vetted documentation reviews.</li> </ul>"},{"location":"#participation-requirements","title":"Participation requirements","text":"<p>To participate in the WriteTech DocReview Series, you must meet the following criteria:</p> <ol> <li> <p>WriteTech Hub community membership    If you're not already a part of the WriteTech Hub community, you can join here and gain access to valuable resources, networking opportunities, and the chance to participate in community-driven initiatives like the DocReview Series.</p> </li> <li> <p>Technical writing experience    You must have experience in technical writing to ensure quality and consistency in reviews. This program is aimed at helping technical writers refine their skills while contributing to real-world documentation projects.</p> </li> <li> <p>Commitment to quality    Each participant is expected to provide thorough, thoughtful, and constructive feedback in their reviews, following the provided template and guidelines.</p> </li> </ol>"},{"location":"#how-it-works","title":"How it works","text":"<p>Documentation selection: Community members select the technical documentation they'd like to review from the curated list of documentation available for that cycle.</p> <p>Documentation review submission: Members write and submit their reviews using the provided review template.</p> <p>Review process: Each submission undergoes: a. External review: Peer-reviewed by selected community members. b. Internal review: Reviewed by in-house technical writers on a final review call.</p> <p>Spotlighting: Approved reviews are published publicly for community access.</p>"},{"location":"#timeline","title":"Timeline","text":"Stage Dates Details Documentation selection 16th September \u2013 23rd September Community members select documentation to review. A list of available documentation will be provided. For more information on the doc selection process, see Documentation selection process Review submission 16th September \u2013 27th September Participants submit their reviews using the provided template. Initial review by experienced writers 26th September \u2013 3rd October Initial reviews are conducted by experienced community writers for preliminary feedback. Review call by WriteTech Hub technical writers 7th October \u2013 11th October In-house technical writers vet the submitted reviews for accuracy and provide necessary feedback. Spotlighting reviews 16th October \u2013 17th October Approved reviews are formatted and shared publicly on the platform, blog, and social media. Recognition &amp; contribution highlights 16th October onwards Contributions are recognized, and top contributors are highlighted within the community."},{"location":"#folder-structure","title":"Folder structure","text":"<ul> <li><code>(year)_cycle/</code>: Holds individual review submissions from the community for that review cycle. It also contains the list of documentation for that cycle.</li> <li><code>review_template/</code>: Contains the review template for submissions.</li> <li><code>docs/</code>: Includes the documentation selection process and additional guidelines.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We encourage you to contribute by following these steps:</p> <ol> <li>Fork this repository.</li> <li>Use the review template located in the <code>templates/</code> folder to craft your review.</li> <li>Submit your review by creating a Pull Request (PR) in the <code>reviews/</code> folder for your participation cycle.</li> <li>External reviewers will assess your PR, followed by an internal review by WriteTech\u2019s technical writers.</li> </ol>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the MIT License \u2013 see the LICENSE file for details.</p>"},{"location":"#join-the-community","title":"Join the community!","text":"<p>By participating in WriteTech DocReview Series, you're not only improving your technical writing skills but also helping enhance technical documentation that impacts real-world applications. If you're not already a member, join the WriteTech Hub Community to participate in the DocReview Series and access other exciting opportunities. Let\u2019s create exceptional documentation together!</p>"},{"location":"#contact-us","title":"Contact us","text":"<p>Have questions or suggestions? Feel free to open an issue or reach out via email at info@writetechhub.org.</p>"},{"location":"doc-selection-process/","title":"Documentation selection process","text":""},{"location":"doc-selection-process/#overview","title":"Overview","text":"<p>This document outlines the process for selecting technical documentation for the WriteTech Hub Review Initiative.</p>"},{"location":"doc-selection-process/#selection-frequency","title":"Selection frequency","text":"<ul> <li>Documentation selection occurs quarterly.</li> <li>Community members will be notified two weeks in advance.</li> </ul>"},{"location":"doc-selection-process/#selection-process","title":"Selection process","text":"<ol> <li>List creation: A list of available technical documentation will be compiled.</li> <li>Community involvement: The list will be shared with community members to express interest.</li> <li>Tracking: Selections will be tracked to ensure coverage and avoid duplicate reviews.</li> <li>Finalization: A finalized list will be shared with the community, marking the start of the review period.</li> </ol>"},{"location":"external-reviewer-selection-template/","title":"External reviewer selection criteria","text":""},{"location":"external-reviewer-selection-template/#objective","title":"Objective","text":"<p>We are selecting mid to senior-level technical writers from our community to form an external review team. This team will provide the first layer of feedback on documentation reviews submitted by community members.</p>"},{"location":"external-reviewer-selection-template/#eligibility-criteria","title":"Eligibility criteria","text":"<ul> <li>Experience: Must have at least 3 years of experience in technical writing.</li> <li>Portfolio: Must provide a portfolio of technical documentation they have authored or reviewed.</li> <li>Community engagement: Should be an active member of the WriteTech Hub community.</li> <li>Commitment: Must commit to reviewing at least 3 documentation reviews per quarter.</li> </ul>"},{"location":"external-reviewer-selection-template/#application-process","title":"Application process","text":"<ol> <li>Fill out the application form [link to form].</li> <li>Provide a link to your portfolio.</li> <li>Explain why you are interested in joining the external review team.</li> </ol>"},{"location":"external-reviewer-selection-template/#selection-process","title":"Selection process","text":"<ul> <li>Applications will be reviewed by the in-house technical writers.</li> <li>Selected candidates will be notified via email and onboarded into the external review team.</li> </ul>"},{"location":"2024/docs/open-source-docs-2024/","title":"\ud83d\udcda Open source documentation list for WriteTech DocReview 2024","text":"Repository Description Language Issues hamaluik/timecop A time tracking app that respects your privacy. Dart -  Release for macOS using Homebrew Cask emanuele-em/proxelar A MITM Proxy Toolkit with SSL/TLS Capabilities. Rust - Request duplication  - Optional GUI  - Remove \ud83d\udd0d and allow click directly on table row to show details kevinanielsen/go-fast-cdn A fast and easy-to-use CDN, built with Go. Go - Documentation: Write documentation for adding another language with i18n to the docs  - Feature: Add button for resizing images apifytech/apify-js A web scraping and browser automation library for Node.js. TypeScript - Idea: we could add function to extract schema.org microdata from a page"},{"location":"2024/reviews/","title":"2024 Reviews","text":"<p>This folder contains all reviews contributed for 2024. Each review is listed below automatically in the sidebar.</p>"},{"location":"2024/reviews/crawlee-quickstart-review/","title":"Crawlee","text":"<p>Documentation Title: Crawlee Quickstart Reviewer Information: Name: Uchenyi Kesandu Date of Review: September 27, 2024 Review Level: Beginner 1. Summary: The Crawlee Quickstart is a technical documentation. It is a brief tutorial that helps developers quickly set up and get started with the Crawlee Library for web crawling and data scraping tasks. It includes the installation guide, example code and the different classes of crawler  2. Clarity and Comprehensiveness:</p> <p>Clarity: Is the information easy to understand? It starts with \u201cimport Runnable from \u2018@site/src/components/RunnableCodeBlock\u2019 \u201d, It is not really the proper start. There should be an Overview that first explains what the quickstart guides us on, then a \u201cBefore you begin section\u201d detailing the prerequisites and things you know and what tools you should have already set up before giving out the instructions.  Then choose your crawler section is more straightforward although it is a little bit too technical. A beginner will still be trying to grasp what scraping with Crawlee means and it is bringing in yet another concept classes of crawler with no illustrations or code block to break it down further. Then finally there comes the \u201cbefore you start\u201d, so the question that comes to mind is \u201cWhat about those import statements at the top?\u201d What were they for? Does it mean we are yet to start the scraping and installation process? The installation with Crawler CLI is easy to understand and is straightforward. However, it is not enough to know how to install the Crawler, one should also know how to use it. An example should be broken down step by step with supporting pictures so that after the quickstart, one can perform a basic web scraping for the website. That example is missing in the quickstart documentation. Beyond that the documentation is written in clear paragraphs and sentences that are easy to understand. Although it might be wise to further explain some technical parts further. Are the sentences and paragraphs clear and straightforward? Yes Is the language appropriate for the intended audience? The question is who is your audience? Senior developers or just developers and people willing to try out something new. If the latter is the case, then No. Some parts are too technical and should be broken down further with supporting illustrations or pictures.</p> <p>Comprehensiveness: Does the documentation cover all necessary topics? No, there is no before you start section Are there any missing sections that are critical for understanding? The example to be run is missing Does it provide sufficient examples, diagrams, or references? No, most of the links are Not Found 3. Accuracy and Relevance: Accuracy: Are the technical details correct? Yes Is there any outdated or incorrect information? No Relevance: Is the content relevant to the current state of the product/technology? Yes Does it align with the latest best practices and standards (e.g., Google\u2019s technical documentation style guide, Microsoft Manual of Style)? Yes 4. Structure and Organization: Logical Flow: Is the documentation logically structured? Yes Are sections and subsections well-organized? Yes Navigation: Is it easy to navigate through the document? Yes Are there clear headings, subheadings, and an index/table of contents? Asides the beginning, Yes ; although the headings can be optimized better.  5. Visual and Design Elements: Visuals: Are diagrams, screenshots, and tables used effectively? No Are visuals clear, properly labelled, and relevant? No Design: Is the document aesthetically pleasing? Yes Is there consistent use of fonts, colors, and formatting? Yes 6. Suggestions for Improvement: Provide specific, actionable suggestions to improve the documentation. Include a basic example to get me started so that I can run my first web scraping and automation Include an Introduction or Overview section Mention any sections that need expansion, rephrasing, or additional content. Crawling section Introduction 7. Notable Strengths: Highlight what the documentation does well. The Choose your crawler and Installation with Crawler CLI Mention sections that are particularly well-written or effective: The Choose your crawler and Installation with Crawler CLI 8. Identified Errors/Inconsistencies: List any errors, inconsistencies, or ambiguities.  The import statements at the beginning is not the best way to introduce a quickstart document. Provide examples where necessary. 9. Best Practices Compliance: Standards: Does the documentation adhere to recognized standards (e.g., Google\u2019s Documentation Guide)? I will say yes although I have not seen he gdg guide yet How does it compare with industry best practices? It writes clear and understandable paragraphs 10. Overall Assessment: Provide an overall assessment of the documentation, including a summary of your key findings. Rate the document on a scale from 1 to 5 based on overall quality and usability. I will rate it as 2, because after going through the quickstart, I did not start. 11. Additional Comments: Any additional observations or comments. writetech-doc-review/templates/review-template.md at main \u00b7 Kessi-ux/writetech-doc-review</p>"},{"location":"2024/reviews/crawlee-review/","title":"Crawlee Technical Documentation Review","text":""},{"location":"2024/reviews/crawlee-review/#documentation-title","title":"Documentation Title","text":"<p>Crawlee</p>"},{"location":"2024/reviews/crawlee-review/#reviewer-information","title":"Reviewer Information","text":"<ul> <li>Name: Ayu</li> <li>Date of Review: 25 September 2024</li> <li>Review Level: Beginner</li> </ul>"},{"location":"2024/reviews/crawlee-review/#1-summary","title":"1. Summary","text":"<p>Crawlee is a web scraping and browser automation library that helps users build reliable crawlers. It makes HTTP requests that mimic browser headers and fingerprints and can switch crawlers from HTTP to headless browsers. These features allow crawlers to appear human-like and be undetected by modern bot protections.</p>"},{"location":"2024/reviews/crawlee-review/#2-clarity-and-comprehensiveness","title":"2. Clarity and Comprehensiveness","text":"<ul> <li>Clarity:</li> </ul> <p>The information is easy to understand, and the language is appropriate for the intended audience.</p> <p>However, not all sentences and paragraphs are clear and straightforward. Some folks might like to read the documentation line by line, which can cause them to read something a couple of times to understand better.</p> <p>Below is an example:</p> <p>In the \"Creating a new project\" section:</p> <p>A prompt will be shown, asking you to select a template. Crawlee is written in TypeScript so if you're familiar with it, choosing a TypeScript template will give you better code completion and static type checking, but feel free to use JavaScript as well. Functionally they're identical.</p> <p>Adding some punctuation and splitting the long sentence into shorter ones would be helpful for clarity and better understanding. Although Crawlee is written in TypeScript, considering it also offers to use JavaScript, the sentence above can be improved with something like:</p> <p>A prompt will be shown, asking you to select a template. Choosing a TypeScript template will give you better code completion and static type checking if you're familiar with it. Otherwise, you can select JavaScript. Functionally, they're identical.</p> <p>As the documentation is aiming audiences with the knowledge of JavaScript\u2014and potentially know what TypeScript is\u2014another suggestion is not to mention them at all and go straight to the point as below:</p> <p>A prompt will be shown, asking you to choose between a TypeScript or JavaScript template.</p> <ul> <li>Comprehensiveness:</li> </ul> <p>The documentation covers all necessary topics and provides sufficient examples and references. It even provides a dedicated chapter for examples. It's also very thoughtful to provide technical explanation pages within the \"Guides\" chapter and link them within the docs.</p>"},{"location":"2024/reviews/crawlee-review/#3-accuracy-and-relevance","title":"3. Accuracy and Relevance","text":"<ul> <li>Accuracy:</li> </ul> <p>I found at least one outdated information as below:</p> <p>The \"JavaScript rendering\" chapter explains the JavaScript rendering through a demonstration.</p> <p>As per documentation, I should get <code>ACTOR:</code> and nothing else on the console when I ran the first code. Instead, I got the below info on the console with no <code>ACTOR:</code> printed anywhere:</p> <pre><code>INFO \u00a0CheerioCrawler: All requests from the queue have been processed, the crawler will shut down.\nINFO \u00a0CheerioCrawler: Final request statistics: {\"requestsFinished\" :1, \"requestsFailed\" :0, \"retryHistogram\":[1], \"requestAvgFailedDurationMillis\":null, \"requestAvgFinishedDurationMillis\":4688, \"requestsFinishedPerMinute\":9, \"requestsFailedPerMinute\" :0, \"requestTotalDurationMillis\":4688, \"requestsTotal\" :1, \"crawlerRuntimeMillis\":6821}\nINFO \u00a0CheerioCrawler: Finished! Total 1 requests: 1 succeeded, 0 failed. {\"terminal\":true}\n</code></pre> <p>It further says:</p> <p>You can confirm this using Chrome DevTools. If you go to https://apify.com/store, right-click anywhere in the page, select View Page Source and search for ActorStoreItem you won't find any results.</p> <p>Searching for <code>ActorStoreItem</code> in the View Page Source found 183 results for all CSS classes. If these classes do not correspond to the documentation, they must be updated to match what <code>ActorStoreItem</code> users want to look for.</p> <ul> <li>Relevance:</li> </ul> <p>The content is relevant to the product's current state. In general, the documentation aligns with the latest Microsoft Writing Style Guide. For example, the documentation is written like we speak. However, it can still be improved by following the best practices of Top 10 tips for Microsoft style and voice.</p> <p>One example is to improve the consistency of contractions, such as it's, you'll, you're, we're, and let's.</p> <p>Taking from the \"Pagination\" section in the \"Real-world project\" chapter:</p> <p>When switching between pages, you will see that the URL changes to:</p> <p>And right in the following line:</p> <p>Try clicking on the link to page 4. You'll see that the pagination links update and show more pages.</p>"},{"location":"2024/reviews/crawlee-review/#4-structure-and-organization","title":"4. Structure and Organization","text":"<ul> <li>Logical Flow:</li> </ul> <p>The documentation is logically structured and well-organized. It's pleasant to follow.</p> <p>However, one subsection in a page might be part of a heading. In the \"JavaScript rendering\" chapter, \"Waiting for elements to render\" might be a subsection of \"Headless browsers\". But they have the same heading level.</p> <ul> <li>Navigation:</li> </ul> <p>The documentation is easy to navigate because the headings, subheadings, and table of contents are clear, and links are generously provided.</p>"},{"location":"2024/reviews/crawlee-review/#5-visual-and-design-elements","title":"5. Visual and Design Elements","text":"<ul> <li>Visuals:</li> </ul> <p>Screenshots are used effectively. They're also clear, properly labeled, and relevant.</p> <ul> <li>Design:</li> </ul> <p>The documentation's aesthetics can be improved. Admonitions (notes, info, tips, warning cards) are very helpful for clarity and caution. However, some pages, e.g., Scraping the Store, have back-to-back admonitions, which can distract the audience.</p> <p>Fonts and colors are consistent throughout the docs. Yet, some formatting can be improved for consistency. Let's take an example from Getting some real-world data page. There are two ways a link is formatted in the documentation:</p> <ul> <li>As an inline code</li> </ul> <p>...when we already know that everything we want to extract can be found at the <code>https://warehouse-theme-metal.myshopify.com/collections</code> page.</p> <ul> <li>As an external link</li> </ul> <p>Let's open DevTools by going to https://warehouse-theme-metal.myshopify.com/collections in Chrome...</p>"},{"location":"2024/reviews/crawlee-review/#6-suggestions-for-improvement","title":"6. Suggestions for Improvement","text":""},{"location":"2024/reviews/crawlee-review/#actionable-suggestions","title":"Actionable Suggestions","text":"<p>Based on the findings and examples in previous sections, below are some suggestions that can be applied:</p> <ul> <li>Some long sentences can be broken into shorter sentences for better reading and understanding.</li> <li>Using punctuation properly can help the audience understand the exact meaning of a sentence.   There might be another way to avoid using heavy back-to-back admonitions so that the audience isn't distracted.</li> <li>The consistency of using \"you\" and \"we\" can be improved. For example, in the \"Scraping the Store\" page, some sections use \"you\", and some go with \"we\".\"</li> </ul>"},{"location":"2024/reviews/crawlee-review/#sections-that-need-expansion-rephrasing-or-additional-content","title":"Sections that Need Expansion, Rephrasing, or Additional Content","text":"<p>There are below sentences in the \"Headless browsers\" section:</p> <p>You can choose from two libraries to control your browser: Puppeteer or Playwright. The choice is simple. If you know one of them, choose the one you know. If you know both, or none, choose Playwright, because it's better in most cases.</p> <p>Playwright is a little more pleasant to use, but both libraries will get the job done.</p> <p>Looking at the wording I emphasize here, the documentation recommends that the audience use Playwright. But it'd be great to explain why Playwright is better than Puppeteer so that the audience can confidently choose one. Also, these sentences give a subjective opinion.</p> <p>It'll be even better to have a table that shows the differences, such as their strengths and weaknesses.</p>"},{"location":"2024/reviews/crawlee-review/#7-notable-strengths","title":"7. Notable Strengths","text":"<p>The documentation is quite informative for those who are new to web scraping. It provides detailed explanations about using Crawlee for web scraping and enough code examples and screenshots.</p> <p>The \"Introduction\" chapter, in particular, does a great job of walking the audience to understand Crawlee and scraping data step-by-step.</p>"},{"location":"2024/reviews/crawlee-review/#8-identified-errorsinconsistencies","title":"8. Identified Errors/Inconsistencies:","text":"<p>Please see explanations and examples in below sections:</p> <ul> <li>2. Clarity and Comprehensiveness</li> <li>3. Accuracy and Relevance</li> <li>Sections that Need Expansion, Rephrasing, or Additional Content</li> </ul>"},{"location":"2024/reviews/crawlee-review/#9-best-practices-compliance","title":"9. Best Practices Compliance","text":"<ul> <li>Standards:   \u00a0 </li> </ul> <p>Creating standards throughout the documentation can be improved. Please see the \"Relevance\" in the 3. Accuracy and Relevance as an example.</p>"},{"location":"2024/reviews/crawlee-review/#10-overall-assessment","title":"10. Overall Assessment","text":"<p>As a background, I have no knowledge of web scraping. Reading the documentation and following the instructions helped me understand web scraping and what Crawlee does. I also gained more knowledge about web scraping, crawling (which I heard a lot about but am not sure what it is), and so on.</p> <p>I rate the document 3 on a scale of 1 to 5. Why 3? I'm one of those readers who read line-by-line when I want to understand something more. Sometimes, I had to read a paragraph a couple of times to understand the information because some sentences were not straightforward and too wordy. Additionally, the back-to-back admonitions distracted me because I felt like I had to read them all thoroughly.</p>"},{"location":"2024/reviews/crawlee-review/#11-additional-comments","title":"11. Additional Comments","text":"<p>It would be great to add information about the legal side of web scraping at the beginning of the documentation. This would clarify what kind of data users may keep, use, and share and what they may not. Knowing the limitations would benefit users and Crawlee as a tool to scrap data from the web.</p>"},{"location":"2024/reviews/go-fast-cdn-review/","title":"Go-fast CDN Technical Documentation Review","text":""},{"location":"2024/reviews/go-fast-cdn-review/#documentation-title","title":"Documentation Title:","text":"<p>Go-fast CDN</p>"},{"location":"2024/reviews/go-fast-cdn-review/#reviewer-information","title":"Reviewer Information:","text":"<ul> <li>Name: [Olawore Hikmah]</li> <li>Date of Review: [ 16/9/2024 ]</li> <li>Review Level: [ Beginner ]</li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#1-summary","title":"1. Summary:","text":"<p>The go-fast CDN is an opensource content delivery network(CDN) made using the Go language. It aims to be faster than the average CDN's and easier to use.</p>"},{"location":"2024/reviews/go-fast-cdn-review/#2-clarity-and-comprehensiveness","title":"2. Clarity and Comprehensiveness:","text":"<ul> <li>Clarity: </li> <li>The information is easy to understand</li> <li>The sentences and paragraphs are clear and straightforward</li> <li> <p>The language is appropriate for the intended audience, though some improvements can be made. Refer to the suggestions section further below.</p> </li> <li> <p>Comprehensiveness:</p> </li> <li>Does the documentation cover all necessary topics?</li> <li>Are there any missing sections that are critical for understanding?</li> <li>Does it provide sufficient examples, diagrams, or references?</li> </ul> <p>Some processes could be better emphasised for clarity. Suggestions can be found in its section below.</p>"},{"location":"2024/reviews/go-fast-cdn-review/#3-accuracy-and-relevance","title":"3. Accuracy and Relevance:","text":"<ul> <li>Accuracy: </li> <li> <p>Are the technical details correct?     Yes</p> </li> <li> <p>Is there any outdated or incorrect information?     No</p> </li> <li> <p>Relevance:</p> </li> <li> <p>Is the content relevant to the current state of the product/technology?    Yes</p> </li> <li> <p>Does it align with the latest best practices and standards (e.g., Google\u2019s technical documentation style guide, Microsoft Manual of Style)?    Yes</p> </li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#4-structure-and-organization","title":"4. Structure and Organization:","text":"<ul> <li>Logical Flow:</li> <li> <p>Is the documentation logically structured?    Yes</p> </li> <li> <p>Are sections and subsections well-organized?    Yes</p> </li> <li> <p>Navigation:</p> </li> <li> <p>Is it easy to navigate through the document?    Yes</p> </li> <li> <p>Are there clear headings, subheadings, and an index/table of contents?    Yes</p> </li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#5-visual-and-design-elements","title":"5. Visual and Design Elements:","text":"<ul> <li>Visuals:</li> <li> <p>Are diagrams, screenshots, and tables used effectively?    None have been used</p> </li> <li> <p>Are visuals clear, properly labelled, and relevant?    Not applicable</p> </li> <li> <p>Design:</p> </li> <li> <p>Is the document aesthetically pleasing?     Yes, nice and simple.</p> </li> <li> <p>Is there consistent use of fonts, colors, and formatting?     Yes</p> </li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#6-suggestions-for-improvement","title":"6. Suggestions for Improvement:","text":"<ul> <li>Provide specific, actionable suggestions to improve the documentation.</li> <li> <p>Mention any sections that need expansion, rephrasing, or additional content.</p> </li> <li> <p>Sentences can be reconstructed to sound less blunt. For example, in the Guides page under the API section, the sentence will sound better and more professional if the statement 'of course' is omitted.</p> </li> <li> <p>In the Guides page under the Usage section, it would be more appropiate to describe the interface further regardless of how little instead of mentioning that it is 'easy to use', especially for users completely new to CDNs in general.  </p> </li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#7-notable-strengths","title":"7. Notable Strengths:","text":"<ul> <li>Highlight what the documentation does well.   The documentation is straight to the point and serves its purpose well.</li> <li>Mention sections that are particularly well-written or effective.   The Contributing section is well written and thorough.</li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#8-identified-errorsinconsistencies","title":"8. Identified Errors/Inconsistencies:","text":"<ul> <li>List any errors, inconsistencies, or ambiguities.</li> <li>Provide examples where necessary.</li> </ul> <p>No inconsistencies noticed</p>"},{"location":"2024/reviews/go-fast-cdn-review/#9-best-practices-compliance","title":"9. Best Practices Compliance:","text":"<ul> <li>Standards: </li> <li> <p>Does the documentation adhere to recognized standards (e.g., Google\u2019s Documentation Guide)?    Yes</p> </li> <li> <p>How does it compare with industry best practices?    Fair</p> </li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#10-overall-assessment","title":"10. Overall Assessment:","text":"<ul> <li> <p>Provide an overall assessment of the documentation, including a summary of your key findings.   Apart from a few places which require further explanation and emphasis, the documentation is straightforward and easy to use.</p> </li> <li> <p>Rate the document on a scale from 1 to 5 based on overall quality and usability.   3.8</p> </li> </ul>"},{"location":"2024/reviews/go-fast-cdn-review/#11-additional-comments","title":"11. Additional Comments:","text":"<ul> <li>Any additional observations or comments.   Nil</li> </ul>"},{"location":"2024/reviews/proxelar-review/","title":"Proxelar Technical Documentation Review","text":""},{"location":"2024/reviews/proxelar-review/#documentation-title","title":"Documentation Title:","text":"<p>Proxelar</p>"},{"location":"2024/reviews/proxelar-review/#reviewer-information","title":"Reviewer Information:","text":"<ul> <li>Name: Ifeoluwa Favour</li> <li>Date of Review: 22 September 2024</li> <li>Review Level: Beginner</li> </ul>"},{"location":"2024/reviews/proxelar-review/#1-summary","title":"1. Summary:","text":"<p>Proxelar is a Rust-based Man-in-the-Middle (MitM) proxy designed to provide visibility into network traffic, specifically HTTP and HTTPS requests and responses. It is currently in its early stages, with core functionality focused on monitoring and displaying traffic. Future updates aim to enable traffic manipulation for more advanced use cases. The project features a GUI, customizable listening addresses, detailed request and response views, filtering by method, and dark/light themes. It's intended for developers and security professionals who need insight into network communications, with cross-platform support for macOS, Ubuntu, and Windows.</p>"},{"location":"2024/reviews/proxelar-review/#2-clarity-and-comprehensiveness","title":"2. Clarity and Comprehensiveness:","text":"<ul> <li>Clarity:  The language is simple and easy to understand.</li> </ul> <p>However, here are some improvements to consider: - The first sentence: \"Rust-based Man in the Middle proxy, an early-stage project aimed at providing visibility into network traffic.\" could be rephrased for clarity. Consider something like: \"Proxelar is an early-stage, Rust-based man-in-the-middle proxy designed to provide visibility into network traffic.\" - Consider using more descriptive headings. For example, the \"Screenshots\" heading could benefit from more detail (e.g., \"Screenshots of Proxelar Features\"). This improves clarity on what the section contains. - For the first command in the quick-start guide, instead of \"sh install_cer.sh,\" clarify that this is a terminal command and briefly explain its purpose. For example, \"Run the following command in your terminal to generate a certificate: sh install_cer.sh.\"</p> <ul> <li>Comprehensiveness: The README covers the basic features, setup instructions, and links to necessary guides (e.g., proxy configuration on different systems).</li> </ul> <p>The user could benefit more if there was more information about prerequisites, like Rust or Tauri, if needed. It would help to explain dependencies or provide a clear list of steps for setup. The user might not know what \"cargo tauri dev\" does or what environment is required.</p>"},{"location":"2024/reviews/proxelar-review/#3-accuracy-and-relevance","title":"3. Accuracy and Relevance:","text":"<ul> <li>Accuracy:  The file provides accurate technical details, such as the location of the certificate and the command for development mode.</li> </ul> <p>One improvement is to include the expected output for the commands (e.g., after generating the certificate). This makes sure users know they have done the steps correctly.</p> <ul> <li>Relevance: The content is relevant to a technical audience, especially those familiar with proxy tools or Rust.</li> </ul> <p>It would be helpful to clarify that this project is for developers or advanced users. This could be stated in the \"Description\" section to set expectations early on.</p>"},{"location":"2024/reviews/proxelar-review/#4-structure-and-organization","title":"4. Structure and Organization:","text":"<ul> <li>Logical Flow: The README follows a logical order, from describing the project, listing features, and then explaining how to get started.</li> </ul> <p>The Contributing and License sections could be moved toward the end, as they are typically not the first concern when setting up the project. A clearer progression would be from \"Description\" -&gt; \"Features\" -&gt; \"Getting Started\" -&gt; \"Screenshots\" -&gt; \"Contributing\" -&gt; \"License.\"</p> <ul> <li>Navigation: The use of headings and bullet points makes it relatively easy to navigate.</li> </ul> <p>The Screenshots section would be user-friendly with more structure. Add a descriptive heading for each image (e.g., \"Screenshot: Input of Listening Address\"). If possible, include brief descriptions of what each image shows.</p>"},{"location":"2024/reviews/proxelar-review/#5-visual-and-design-elements","title":"5. Visual and Design Elements:","text":"<ul> <li>Visuals: A brief and clear screen recording of how the project works is included at the beginning of the README and a list of clear screenshots are also included at the end of the README.</li> </ul> <p>The video and images need a more descriptive heading and labels for them to be effective. </p> <ul> <li>Design: The README is generally aesthetically pleasing and there is a consistent use of fonts and colour but it's not consistent in capitalisation and punctuation</li> </ul>"},{"location":"2024/reviews/proxelar-review/#6-suggestions-for-improvement","title":"6. Suggestions for Improvement:","text":"<ol> <li> <p>Description Section: Current: \"Rust-based Man in the Middle proxy, an early-stage project aimed at providing visibility into network traffic.\" Suggested Rephrase: \"Proxelar is an early-stage, Rust-based man-in-the-middle proxy designed to provide visibility into network traffic. Currently, it displays HTTP and HTTPS requests and responses. In future updates, we plan to include traffic manipulation for advanced use cases.\" Reason: This rephrase clarifies the project\u2019s purpose and goals in a concise, user-friendly way.</p> </li> <li> <p>Features Section: Suggested Addition: Provide brief explanations for each feature: Current: \"\ud83d\udd10 HTTP / HTTP(s)\" Suggested: \"\ud83d\udd10 Supports HTTP and HTTPS protocols for monitoring traffic.\" Current: \"\ud83d\uddb1\ufe0f Gui\" Suggested: \"\ud83d\uddb1\ufe0f User-friendly graphical interface for easy interaction.\" Current: \"\u2328\ufe0f Possibility of choosing a customised address and listening port\" Suggested: \"\u2328\ufe0f Customize the listening address and port for specific needs.\" Reason: The icons are helpful, but each feature should have a brief explanation to provide context.</p> </li> <li> <p>Getting Started Section: Current: \"Generate a Certificate: sh install_cer.sh\" Suggested Rephrase &amp; Expansion:</p> </li> <li>Install Dependencies      Ensure you have the following installed:<ul> <li>Rust (Installation Guide)</li> <li>Tauri (Installation Guide)</li> </ul> </li> <li>Generate a Certificate:     Run the following command in your terminal to generate a certificate:     <code>sh install_cer.sh</code>     The generated certificate can be found at: ./proxyapi/src/ca/proxelar.cer. Reason: Adding a dependencies section clarifies any prerequisites. Describing the command and output in more detail improves clarity.</li> </ol> <p>Suggested Addition: Provide example outputs for the certificate generation and proxy setup steps so users know what to expect.</p> <ol> <li>Screenshots Section: Suggested Rephrase &amp; Addition: \"### Screenshots Below are screenshots showcasing Proxelar in action: Listening Address Input: [image]\" Reason: Adding a brief description of what each image represents will improve clarity. Screenshots should be referenced with an appropriate heading and description.</li> </ol>"},{"location":"2024/reviews/proxelar-review/#7-notable-strengths","title":"7. Notable Strengths:","text":"<p>These are the areas the documentation does well: - It has a concise description - It has a minimalistic design - It includes clear images</p> <p>These are the sections that are particularly well written: - The Features section - The Getting Started section</p>"},{"location":"2024/reviews/proxelar-review/#8-identified-errorsinconsistencies","title":"8. Identified Errors/Inconsistencies:","text":"<ol> <li> <p>Inconsistent Punctuation in the Features Section: Issue: Some feature descriptions end with punctuation, while others do not. Example: \"\ud83d\udd10 HTTP / HTTP(s)\" \"\ud83c\udfaf Filtering the list of requests by method\" (has a period at the end, while others don\u2019t). Suggestion: Be consistent with punctuation. Either end all feature descriptions with a period or none at all.</p> </li> <li> <p>Vague Wording in Description Section: Issue: The phrase \"Rust-based Man in the Middle proxy\" is unclear about the project name and does not specify its exact usage.</p> </li> </ol> <p>Example: \"Rust-based Man in the Middle proxy, an early-stage project aimed at providing visibility into network traffic.\"</p> <p>Suggestion: Clearly name the project and refine the description. For example: \"Proxelar is an early-stage, Rust-based man-in-the-middle (MITM) proxy designed to provide visibility into HTTP and HTTPS network traffic.\"</p> <ol> <li>Ambiguity in the \"Generate a Certificate\" Command: Issue: It\u2019s unclear where or in which directory users should run the sh install_cer.sh command.</li> </ol> <p>Example: \"Generate a Certificate: sh install_cer.sh\"</p> <p>Suggestion: Specify the directory where this command should be run. For example: Navigate to the root directory of the project, then run the following command to generate the certificate:</p> <pre><code>sh install_cer.sh  \n</code></pre> <ol> <li> <p>Inconsistent Use of Capitalization: Issue: The capitalization of section headings and commands is inconsistent. For instance, \"Gui\" should be \"GUI\" (uppercase acronym). Example: \"Gui\" should be \"GUI.\" \"MacOS\" should be \"macOS\" (correct branding style). Suggestion: Ensure consistent capitalization, particularly for acronyms and product names.</p> </li> <li> <p>Lack of Context for Commands: Issue: The purpose and expected output of commands are not explained. For example, running cargo tauri dev doesn\u2019t clarify what users should expect.</p> </li> </ol> <p>Example: \"cargo tauri dev\"</p> <p>Suggestion: Add a brief explanation of what each command does and what the user should expect. For example: \"cargo tauri dev starts the development environment. Once the server is running, you should see a success message indicating that the development environment is live.\"</p> <ol> <li>Ambiguous Screenshots Section: Issue: The \"Screenshots\" section is missing a proper heading and context for the images.</li> </ol> <p>Example: \"Input of Listening Address\" is just a sentence with no indication of what users are supposed to learn from the screenshot.</p> <p>Suggestion: Add a proper heading and describe what the screenshots show. For example: \"### Screenshots</p> <p>Listening Address Input: This screenshot shows the interface where users can input a custom listening address.\"</p> <ol> <li>Missing Details in License Section: Issue: The license section mentions files but doesn\u2019t specify the type of license.</li> </ol> <p>Example: \"See LICENSE-APACHE, LICENSE-MIT for details.\"</p> <p>Suggestion: Clarify what licenses the project uses and link directly to the files. Example: \"This project is dual-licensed under the Apache License 2.0 and the MIT License.\"</p>"},{"location":"2024/reviews/proxelar-review/#9-best-practices-compliance","title":"9. Best Practices Compliance:","text":"<p>In comparison to Google's Documentation style guide, these are the areas where the documentation worked well: - Conciseness: Industry best practices also favor concise documentation, which this README achieves, particularly in the \"Features\" and \"Getting Started\" sections. - Focus on Key Actions: Like Google\u2019s guide, industry best practices emphasize that documentation should guide users to complete key tasks. The README effectively does this by providing direct setup instructions and clear commands for getting started.</p> <p>These are the areas to be improved on in the documentation: - Readability and Flow: The README could improve its flow by adding headings and better sectioning, especially for the \"Screenshots\" section, which currently feels disjointed and incomplete. - Comprehensive Setup Instructions: The instructions should be as detailed as possible without being overwhelming. The current README provides basic steps but lacks deeper context (e.g., explanation of the certificate generation process or what users should expect after running commands).</p>"},{"location":"2024/reviews/proxelar-review/#10-overall-assessment","title":"10. Overall Assessment:","text":"<p>The README does a good job of introducing the project and guiding users through basic setup, making it functional and easy to understand for most users. It provides concise information about the project\u2019s key features and instructions on how to get started. However, it falls short in terms of consistency, detail, and navigability.</p> <p>I rate the README documentation a 3.5 out of 5 for the overall quality.</p>"},{"location":"2024/reviews/proxelar-review/#11-additional-comments","title":"11. Additional Comments:","text":"<p>The README is currently the only form of documentation for the project. It would be more helpful for the users and the project maintainers if it had an extra and more detailed documentation so as to reduce the number of questions asked in the Github Discussions section.</p>"},{"location":"2024/reviews/time-cop-review/","title":"Time Cop Technical Documentation Review","text":""},{"location":"2024/reviews/time-cop-review/#documentation-title","title":"Documentation Title:","text":"<p>Time Cop Documentation</p>"},{"location":"2024/reviews/time-cop-review/#reviewer-information","title":"Reviewer Information:","text":"<ul> <li>Name: Ebenezer Raphael</li> <li>Date of Review: 23rd September 2024</li> <li>Review Level: Beginner</li> </ul>"},{"location":"2024/reviews/time-cop-review/#1-summary","title":"1. Summary:","text":"<p>The Time Cop documentation provides an overview of Time Cop, an offline, privacy-first, time-tracking application. It highlights its key features such as project organization, CSV data export, multi-language support, and the absence of ads or tracking.</p> <p>The author said, \"...I fundamentally want to keep this app relatively small and simple.\", which includes the documentation. Hence, the documentation was written on the homepage of the website, rather than a dedicated page.</p>"},{"location":"2024/reviews/time-cop-review/#2-clarity-and-comprehensiveness","title":"2. Clarity and Comprehensiveness:","text":"<ul> <li>Clarity: </li> <li>The information is simple, direct and easy to understand.</li> <li>Sentences are clear, concise and very straight to the point.</li> <li>Comprehensiveness: </li> <li>The documentation goes over the basic features of the application but could expand more on advanced features or integration tips. For example, the \"Export data as a .csv file, filtered by timespans and projects\" could also highlight advanced functionalities like integrating the CSV exports into productivity tools like Excel or other project management software.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#3-accuracy-and-relevance","title":"3. Accuracy and Relevance:","text":"<ul> <li>Accuracy: </li> <li>Having tried the application myself, all the features and technical details seem correct and in line with the application's capabilities, as stated in the documentation.</li> <li>The documentation states that it is a \"mobile-only\" time-tracking application, but the README in the GitHub repo doesn't say so. Rather the repo provides information on how to install the application on Linux. This misinformation could be detrimental and cost them some users.</li> <li>Relevance: </li> <li>The documentation is relevant to the current version of the application and matches its privacy-centric nature.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#4-structure-and-organization","title":"4. Structure and Organization:","text":"<ul> <li>Logical Flow:</li> <li>Unfortunately, the documentation doesn't really follow a logical sequence. It contains one heading \"Features\", where all the information concerning the application is listed in bullet points in a spurious manner.</li> <li>Navigation:</li> <li>It is quite easy to navigate since there are only a few sections\u2014one.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#5-visual-and-design-elements","title":"5. Visual and Design Elements:","text":"<ul> <li>Visuals:</li> <li>The documentation contains a screenshot that gives a sneak peek of the application's interface.</li> <li>Design:</li> <li>It has a clean and minimalist design.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#6-suggestions-for-improvement","title":"6. Suggestions for Improvement:","text":"<ul> <li>The documentation should include a short description of the application, aside from the existing one\u2014which looks more like a \"Copy\". Something like this would suffice    \"Time Cop is a minimalist time-tracking application focused on providing a private, distraction-free experience. It is designed for users who value simplicity. It helps manage tasks and projects efficiently without relying on internet connectivity or external data storage services\".</li> <li>The documentation should be expanded with more sections like a \"Quick Start\" section, providing information about devices and installation.</li> <li>The \"Feature\" section should then be narrowed down to the core features such as the \"Privacy\", \"Offline\", \"CSV Exporting\", \"Multiple Timers\", and \"Project Grouping\" features.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#7-notable-strengths","title":"7. Notable Strengths:","text":"<ul> <li>The documentation is written in simple language and a straightforward approach, making it easily understandable by a wide range of users.</li> <li>It effectively emphasizes the privacy aspects of the application.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#8-identified-errorsinconsistencies","title":"8. Identified Errors/Inconsistencies:","text":"<ul> <li>The documentation contains only one section, which gives it a false sense of consistency.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#9-best-practices-compliance","title":"9. Best Practices Compliance:","text":"<ul> <li>Standards: </li> <li>The documentation follows basic best practices in clarity but lacks a logical flow and structure.</li> </ul>"},{"location":"2024/reviews/time-cop-review/#10-overall-assessment","title":"10. Overall Assessment:","text":"<ul> <li>The documentation is clear and concise but would benefit from more sections and blocks.</li> <li>Rating: 6/10 \ud83d\ude42</li> </ul>"},{"location":"2024/reviews/time-cop-review/#11-additional-comments","title":"11. Additional Comments:","text":"<ul> <li>The documentation would also benefit from a \"FAQs\" section that would address common user issues and concerns.</li> </ul>"},{"location":"2025/docs/open-source-docs-2025/","title":"\ud83d\udcda Open source documentation list for WriteTech DocReview 2025","text":"Repository Description Language Issues Oxyplot/oxyplot A cross-platform plotting library for .NET. C# 1. Documentation improvements for the OxyPlot API.  2. Update the Getting Started guide for new users.  3. Add more examples and use cases to the documentation. elastic/beats Lightweight shippers for Elasticsearch &amp; Logstash. Go 1. Handle K8s events with invalid count or invalid Timestamps 2. 7.x Prefer hot data tiers 3. Support multiline in syslog input 4. Metricbeat - Missing documentation in SQL module 5. OSS filebeat harvester_test.go should not depend on Elastic-licensed code 6. Filebeat setup check gives spurious ILM error 7. Document that the max_bytes configured for the filebeat log input may be multiplied by 4 8. Docker autodiscover hints &amp; networks 9. Remove mention of \"elastic\" user in cloud setup docs 10. Filebeat Processors - make uppercase and lowercase processors (as in ES ingest nodes) available to filebeat fortio/fortio Load testing library, command line tool, advanced echo server and web UI in Go. Go 1. Blog post(s)/article about fortio (features)  2. (auto?)update the screenshots in the readme  3. Add golden copies of log output (presence and absence of Warning/Errors) for tests  4. Find (or write?) HTTP compatibility tests  5. Support HTTP proxy for fast client too Stellarium/stellarium Free GPL software which renders realistic skies in real time with OpenGL. C++ 1. Rise-set of Sun, Moon and other sky objects in different height of places 2. Planes plugin reactivation 3. With atmosphere turned off, Moon still looks red during total lunar eclipse 4. Request support for Xbox Wireless Controller 5. Including conversion of spherical plane into star's proper motion calculations 6. Drag and drop an image, platesolve it and display it with variable transparency above background 7. Mollweide Projection 8. SynScanMobile.Telescope issue with V24.1qt6 on Windows v22H2 9. Advance selected object to next az/alt crossing 10. Adapt Stellarium to non-android/non-AOSP-based mobile devices? Postmarket, UbuntuTouch, Manjaro, Maemo... google/gvisor Application Kernel for Containers. Go 1. Use error wrapping in Go 1.13 2. Combine similar syscall tests 3. Add tests for msgqueue.go 4. Implement /dev/kmsg inside gVisor 5. Beef up write syscall tests 6. Tcpip.Endpoint.Write() doc is out of date 7. /proc/sys/net/ipv6 not supported 8. Unable to get hostname of host when running container with --uts=host 9. Binding to IPv6 multicast from ICMPv6 sockets returns EADDRNOTAVAIL 10. Failed to stop overwriting a running binary datafuselabs/databend Modern alternative to Snowflake. Cost-effective and simple for massive-scale analytics. Rust 1. Refactor: Try using build-info  2. Feature: Add type checker for sqlglogictest 3. Feature: Support map functions 4. Feature: Function about convert_timezone 5. Feature: Allow user to query on spilled storage size on system.query_log table 6. Refactor: Use native async fn in trait syntax 7. Feature: Add list function like duckdb 8. Feature: Support dynamic log level changes for the query level 9. Tracking: Re-org the functions doc 10. Show variables tldr-pages/tldr Simplified and community-driven man pages. Markdown 1. Deprioritize the node client in README.md  2. decision/docs: keep or change the approach for #8786 and #7596 and document this  3. Proposal: document all periodic maintenance tasks  4. Part of set-of-tools thumbor/thumbor Smart imaging service. It enables on-demand crop, resizing, and flipping of images. Python 1. Avif and autorotation not working properly  2. Not working in linux/arm64 based vm with Docker  3. Thumbor not working on Windows 11 BookStackApp/BookStack A simple, self-hosted, easy-to-use platform for organizing and storing information. PHP 1. Book, Chapter, Page URL by using id instead of permalink  2. Set Preferred Language for Guest Users  3. Code instead of wiki pages gollum/gollum A simple, Git-powered wiki with a sweet API and local frontend. Ruby 1. Mermaid Diagram not rendered properly for AsciiDoc docs  2. Setting check_anchors for Mustermann in config.rb mautic/mautic Open-source marketing automation software. PHP 1. New email form validation is not firing properly for field Subject  2. Write the documentation to support the Campaign import/export features  3. Remove auto-merge GitHub actions"}]}